// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

model Call {
  id             String              @id @default(uuid())
  title          String
  description    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  callTags       CallTag[]
  tasks          Task[]
  suggestedTasks SuggestedTaskCall[]
}

model Tag {
  id                String             @id @default(uuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  callTags          CallTag[]
  suggestedTaskTags SuggestedTaskTag[]
}

model CallTag {
  id     String @id @default(uuid())
  call   Call   @relation(fields: [callId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  callId String
  tagId  String

  @@unique([callId, tagId])
}

model Task {
  id          String     @id @default(uuid())
  description String
  status      TaskStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  call   Call   @relation(fields: [callId], references: [id])
  callId String
}

model SuggestedTask {
  id          String     @id @default(uuid())
  description String     @unique
  status      TaskStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tags  SuggestedTaskTag[]
  calls SuggestedTaskCall[]
}

model SuggestedTaskTag {
  id              String        @id @default(uuid())
  tag             Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  suggestedTask   SuggestedTask @relation(fields: [suggestedTaskId], references: [id], onDelete: Cascade)
  tagId           String
  suggestedTaskId String

  @@unique([suggestedTaskId, tagId])
}

model SuggestedTaskCall {
  id              String        @id @default(uuid())
  call            Call          @relation(fields: [callId], references: [id], onDelete: Cascade)
  suggestedTask   SuggestedTask @relation(fields: [suggestedTaskId], references: [id], onDelete: Cascade)
  callId          String
  suggestedTaskId String

  @@unique([suggestedTaskId, callId])
}
